-- Expression evaluator
import List;
import State;

fun evalBinop(binop, l, r) {
  case binop of
    "+" -> l + r
  | "-" -> l - r
  | "*" -> l * r
  | "/" -> l / r
  | "%" -> l % r
  | "<" -> l < r
  | ">" -> l > r
  | "<=" -> l <= r
  | ">=" -> l >= r
  | "==" -> l == r
  | "!=" -> l != r
  | "&&" -> l && r
  | "!!" -> l !! r
  esac
}

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)
public fun evalExpr (st, expr) {
  case expr of
      Var (x)   -> st (x)
    | Const (n) -> n
    | Binop (binop, n1, n2) -> evalBinop (binop, evalExpr (st, n2), evalExpr (st, n2))
  esac
}