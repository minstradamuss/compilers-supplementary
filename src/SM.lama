-- Stack machine.
import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
   case i of
     READ     -> sprintf("READ")
   | WRITE    -> sprintf("WRITE")
   | BINOP(s) -> sprintf("BINOP %s", s)
   | LD(x)    -> sprintf("LD %s", x)
   | ST(x)    -> sprintf("ST %s", x)
   | CONST(n) -> sprintf("CONST %d", n)
   esac
}
public fun showSM (prg) {
   map(fun (i) {showSMInsn(i) ++ "\n"}, prg).stringcat
}
-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
      {}   -> c
    | i:is -> {
        var stack = c[0];
        var state = c[1];
        var world = c[2];
        
        var newC = case i of
          READ -> {
            case readWorld(world) of
              [varname, newWorld] -> [[varname : stack], state, newWorld]
            esac
          }
          
        | WRITE -> {
            case stack of
              varname : newStack -> [newStack, state, writeWorld(varname, world)]
            esac
          }
          
        | BINOP (op) -> {
            case stack of
              ex2 : ex1 : newStack -> [evalBinop(op, ex1, ex2) : newStack, state, world]
            esac
          }
          
        | LD (x) -> [[state(x) : stack], state, world]
          
        | ST (x) -> {
            case stack of
              varname : newStack -> [newStack, state <- [x, varname], world]
            esac
          }
          
        | CONST (n) -> [[n : stack], state, world]
        esac;
        
        eval(newC, is)
      }
  esac
}
-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
   eval([{}, emptyState, createWorld(input)], insns)[2].getOutput
}
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
      Var (x)   -> {LD (x)}
    | Const (n) -> {CONST (n)}
    | Binop (binop, n1, n2) -> compileExpr (n1) +++ compileExpr (n2) +++ {BINOP (binop)}
  esac
}
-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
      Assn (x, n)  -> compileExpr (n) +++ {ST (x)}
    | Read (x)     -> {READ, ST (x)}
    | Write (n)    -> compileExpr (n) +++ {WRITE}
    | Skip         -> {}
    | Seq (n1, n2) -> compileSM (n1) +++ compileSM (n2)
  esac
}