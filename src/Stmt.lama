-- Statement evaluator.
import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
fun eval (c, stmt) {
   var state = c[0];
   var world = c[1];
   
   case stmt of
      Assn (varname, expr) -> [state <- [varname, evalExpr(state, expr)], world]
      
    | Seq (stmt1, stmt2) -> eval(eval(c, stmt1), stmt2)
      
    | Skip -> c
      
    | Read (varname) -> {
        case readWorld(world) of
          [value, newWorld] -> [state <- [varname, value], newWorld]
        esac
      }
      
    | Write (expr) -> [state, writeWorld(evalExpr(state, expr), world)]
   esac
}
-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
   eval([emptyState, createWorld(input)], stmt).snd.getOutput
}